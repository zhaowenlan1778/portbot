require 'net/http'
require 'uri'
require 'json'

GHENDPOINT = "https://api.github.com"
#### Insert your username and personal access token here
USERNAME = "XXX"
TOKEN = "XXX"
##########################################################

#### Insert repo name to port from and to here
PORT_FROM = "yuzu-emu/yuzu"
PORT_TO = "citra-emu/citra"
SHORTENED_NAME_FROM = "yuzu"
##########################################################

#### Path to the git repo of PORT_TO
REPO_PATH = "./citra"

module GithubAPI
def self.post(url, data)
    url = URI.parse("#{GHENDPOINT}#{url}")
    req = Net::HTTP::Post.new(url.path,{'Content-Type' => 'application/json', 'User-Agent' => 'zhaowenlan1779/portbot'})
    req.body = data
    req.basic_auth USERNAME, TOKEN
    http = Net::HTTP.new(url.host,url.port)
    http.use_ssl = true
    res = http.start{|http| http.request(req)}

    JSON.parse(res.body)
end

def self.get(url, data)
    url = URI.parse("#{GHENDPOINT}#{url}")
    req = Net::HTTP::Get.new(url.path,{'Content-Type' => 'application/json', 'User-Agent' => 'zhaowenlan1779-portbot'})
    req.body = data
    req.basic_auth USERNAME, TOKEN
    
    http = Net::HTTP.new(url.host,url.port)
    http.use_ssl = true
    res = http.start{|http| http.request(req)}
    JSON.parse(res.body)
end
end

def pr_title(pr, prjson)
    title = prjson["title"]
    "Port \"#{title}\" from #{SHORTENED_NAME_FROM}"
end

def pr_message(pr)
    "*This PR is generated by portbot.*\n\nPlease refer to #{PORT_FROM}\##{pr} for details."
end

def execute(command)
    system command
    unless $? == 0
        puts "Command #{command} failed: exit code is #{$?}."
        puts "Please fix the error and we will continue"
        gets
    end    
end

puts "portbot by zhaowenlan1779"
puts "MIT License"
puts "Notice: please add #{PORT_FROM} as a remote and fetch it before running this tool"
puts "Also ensure working tree to be clean!"
loop do
    puts "specify the PR to port from #{PORT_FROM} to #{PORT_TO}:"
    pr = gets.to_i
    puts "Working...."
    puts "1. Create a branch to work on"
    execute "git checkout -b port-#{SHORTENED_NAME_FROM}-#{pr}"
    puts "2. Check out commits from #{PORT_FROM}\##{pr}"
    prjson = GithubAPI::get("/repos/#{PORT_FROM}/pulls/#{pr}", "")
    commits = GithubAPI::get("/repos/#{PORT_FROM}/pulls/#{pr}/commits", "")
    puts "Please make sure the PR is merged by merge commit, or bot will fail."
    puts "3. Cherry pick the commit on currently working directory"
    commits.each do |commit|
        sha = commit["sha"]
        puts "Commit sha is #{sha}"
        execute "git cherry-pick #{sha}"
    end
    puts "4. Push to origin"
    execute "git push -f --set-upstream origin port-#{SHORTENED_NAME_FROM}-#{pr}"
    puts "5. Create the pull request"
    
    GithubAPI::post("/repos/#{PORT_TO}/pulls", {"title" => pr_title(pr, prjson), "body" => pr_message(pr), "head" => "#{USERNAME}:port-#{SHORTENED_NAME_FROM}-#{pr}", "base" => "master"}.to_json)
    
    puts "Porting completed!"
    execute "git checkout master"
end    
